[uwsgi]
env = STATE=
; 'dev'
; 'test'
; 'prod'
env = API_HOST=
strict = true
module = wsgi:app
master = true
uid = master
gid = master
processes = 5
; socket = 0.0.0.0:5000
; protocol = http
; socket = lexer.sock
enable-threads = true
need-app = true
chmod-socket = 660
vacuum = true
die-on-term = true
virtualenv = ../server
max-requests = 1000                  ; Перезапуск workers после указанного количества запросов
max-worker-lifetime = 3600           ; Перезапуск workers после указанного времени в сек
reload-on-rss = 512                 ; Перезапуск workers после потребления указанного количества памяти
worker-reload-mercy = 60             ; Время ожидания перед уничтожение процессов workers
cheaper-algo = busyness              
processes = 500                      ; Максимально допустимое количество workers
cheaper = 8                          ; Минимально допустимое количество workers
cheaper-initial = 16                 ; workers, созданные при запуске
cheaper-overload = 1                 ; Продолжительность цикла в секундах
cheaper-step = 16                    ; Сколько workers на spawn за один раз

cheaper-busyness-multiplier = 30     ; Сколько циклов ждать, прежде чем убивать workers
cheaper-busyness-min = 20            ; Ниже этого порога убивает workers (если стабильно для множителя циклов)
cheaper-busyness-max = 70            ; Выше этого порога порождаются новые workers
cheaper-busyness-backlog-alert = 16  ; Порождает аварийных workers, если в очереди ожидает больше этого количества запросов 
cheaper-busyness-backlog-step = 2    ; Сколько аварийных workers будет создано, если в очереди слишком много запросов